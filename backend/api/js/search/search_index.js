var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.672,1,1.672]],["body/controllers/AppController.html",[0,2.61,1,2.61,2,2.856,3,0.742,4,0.742,5,0.547,6,2.856,7,0.742,8,1.564,9,5.055,10,2.084,11,0.048,12,1.103,13,3.527,14,1.103,15,4.417,16,1.413,17,0.742,18,0.852,19,0.742,20,0.378,21,2.856,22,3.527,23,1.103,24,3.527,25,3.527,26,0.038,27,0.038]],["title/modules/AppModule.html",[28,1.285,29,1.672]],["body/modules/AppModule.html",[1,2.435,2,2.899,3,0.541,4,0.541,5,0.399,11,0.049,17,1.101,18,0.62,19,0.541,20,0.275,26,0.031,27,0.031,28,1.625,29,3.003,30,1.166,31,1.434,32,2.079,33,2.079,34,2.506,35,2.204,36,2.115,37,1.517,38,1.325,39,2.568,40,2.45,41,3.58,42,1.325,43,2.079,44,1.517,45,3.58,46,2.568,47,2.079,48,2.568,49,1.029,50,1.517,51,2.568,52,2.45,53,2.568,54,1.268,55,2.079,56,2.079,57,1.166,58,1.517,59,1.758,60,2.079,61,2.568,62,2.568,63,1.517,64,2.568,65,2.568,66,2.568,67,1.517,68,1.758,69,3.58,70,2.079,71,1.517,72,2.568,73,2.568,74,1.758]],["title/modules/AuthModule.html",[28,1.285,34,1.461]],["body/modules/AuthModule.html",[3,0.5,4,0.5,5,0.369,11,0.049,17,1.068,18,0.574,19,0.5,20,0.255,26,0.029,27,0.029,28,1.539,30,1.079,31,1.359,34,2.737,35,2.15,36,2.004,37,1.405,38,1.227,40,2.321,49,0.953,50,1.405,56,1.925,57,1.079,74,2.321,75,1.925,76,2.378,77,1.925,78,1.925,79,2.387,80,2.445,81,2.15,82,2.378,83,2.746,84,3.391,85,1.405,86,3.391,87,1.627,88,1.925,89,2.378,90,2.378,91,2.004,92,2.378,93,2.378,94,2.378,95,2.04,96,2.705,97,1.627,98,2.705,99,2.378,100,2.378,101,2.378,102,1.627,103,2.378,104,1.925,105,1.627,106,1.405,107,2.378,108,1.925,109,2.378,110,2.378,111,1.627,112,2.378]],["title/classes/AuthResolver.html",[20,0.303,91,1.672]],["body/classes/AuthResolver.html",[3,0.542,4,0.542,5,0.4,7,0.542,8,1.27,10,2.12,11,0.048,12,1.291,14,1.122,17,0.94,19,0.542,20,0.276,23,1.291,26,0.031,27,0.031,42,1.33,71,1.522,79,2.207,88,2.086,91,2.12,113,1.522,114,2.086,115,2.509,116,3.056,117,4.464,118,1.33,119,2.576,120,2.576,121,1.438,122,1.122,123,0.997,124,1.27,125,2.086,126,3.615,127,3.588,128,2.576,129,2.905,130,2.305,131,3.588,132,2.576,133,2.086,134,2.086,135,2.086,136,1.522,137,1.763,138,1.763,139,2.456,140,2.576,141,2.576,142,2.086,143,2.086,144,1.522,145,2.905,146,2.576,147,2.576,148,1.763,149,2.576,150,2.086,151,1.33,152,1.522,153,2.576,154,2.576]],["title/injectables/AuthService.html",[79,1.285,155,0.885]],["body/injectables/AuthService.html",[3,0.411,4,0.411,5,0.303,7,0.411,8,1.038,11,0.049,12,1.102,14,0.917,16,1.769,17,0.964,18,0.471,19,0.411,20,0.209,23,1.102,26,0.025,27,0.025,49,0.781,50,1.152,54,0.691,55,1.579,57,0.885,79,1.331,81,2.079,87,1.335,95,1.007,96,1.335,98,1.335,111,1.335,115,2.279,116,2.007,118,1.514,121,1.412,122,1.102,123,0.851,124,1.248,125,2.375,126,3.174,129,1.579,130,2.023,135,1.579,136,1.152,137,1.335,138,1.335,144,2.082,151,2.433,152,2.082,155,0.917,156,1.007,157,1.579,158,3.524,159,1.95,160,4.415,161,1.835,162,1.95,163,1.95,164,1.95,165,2.483,166,1.95,167,2.023,168,2.932,169,1.95,170,1.95,171,1.95,172,2.412,173,1.95,174,1.95,175,2.316,176,1.95,177,1.95,178,2.932,179,1.95,180,2.932,181,1.335,182,1.95,183,1.335,184,1.95,185,1.95,186,1.95,187,1.95,188,1.95,189,1.579,190,1.733,191,2.375,192,1.95,193,2.412,194,2.932,195,1.579,196,1.95,197,1.95,198,1.95,199,1.579,200,1.95]],["title/classes/GraphQlAuthGuard.html",[20,0.303,201,1.672]],["body/classes/GraphQlAuthGuard.html",[3,0.694,4,0.694,5,0.511,7,0.694,8,1.498,11,0.048,12,1.03,14,1.03,17,0.984,18,0.796,19,0.694,20,0.353,23,1.03,26,0.036,27,0.036,42,1.701,68,2.896,85,1.947,113,1.947,121,1.32,122,1.03,123,0.796,124,1.167,148,2.255,175,1.947,201,2.5,202,3.426,203,2.668,204,4.231,205,4.231,206,3.993,207,3.295,208,3.295,209,3.295,210,2.668,211,3.295,212,3.295,213,3.295,214,3.295]],["title/injectables/JwtStrategy.html",[80,1.461,155,0.885]],["body/injectables/JwtStrategy.html",[3,0.59,4,0.59,5,0.435,7,0.59,8,1.346,11,0.048,12,1.188,14,0.876,17,0.974,18,0.676,19,0.59,20,0.3,23,1.188,26,0.033,27,0.033,49,1.122,50,1.655,80,1.962,85,1.655,95,2.226,96,1.917,98,1.917,102,1.917,104,2.268,105,1.917,106,1.655,108,2.268,115,2.226,118,2.226,121,1.122,122,0.876,123,0.676,124,0.992,148,1.917,155,1.188,156,1.446,167,1.962,181,1.917,191,2.268,210,2.268,215,2.268,216,3.8,217,2.801,218,3.8,219,2.801,220,2.268,221,2.801,222,2.801,223,2.268,224,2.801,225,2.801,226,2.801,227,2.801,228,2.801,229,2.801,230,2.801,231,2.801,232,2.801,233,2.268,234,2.801,235,2.801,236,2.801,237,2.801,238,3.8,239,2.801,240,2.801]],["title/injectables/PasswordService.html",[81,1.285,155,0.885]],["body/injectables/PasswordService.html",[3,0.549,4,0.549,5,0.405,7,0.549,8,1.282,11,0.048,12,1.3,14,1.132,16,2.076,17,0.762,18,0.63,19,0.549,20,0.28,23,1.404,26,0.031,27,0.031,81,1.644,97,1.786,121,1.451,122,1.132,123,1.004,124,1.282,130,2.317,155,1.132,156,1.347,165,2.787,172,2.845,241,2.113,242,2.139,243,4.157,244,4.88,245,4.157,246,3.62,247,4.157,248,4.489,249,2.61,250,3.62,251,2.61,252,1.542,253,2.113,254,2.932,255,2.61,256,4.489,257,2.932,258,2.61,259,2.61,260,2.61,261,2.61,262,2.61,263,2.61,264,2.61,265,2.61,266,2.61,267,2.61]],["title/entities/UserModel.html",[54,1.002,268,1.937]],["body/entities/UserModel.html",[3,0.434,4,0.434,5,0.32,7,0.434,10,2.831,11,0.048,12,1.498,16,2.089,17,0.643,19,0.434,20,0.327,26,0.026,27,0.026,54,1.082,57,0.935,59,2.091,63,1.217,71,2.831,106,1.217,122,0.644,123,1.182,124,1.596,136,1.217,137,1.41,138,1.41,151,1.577,165,2.38,167,2.079,193,2.493,242,1.805,252,1.805,268,2.493,269,1.668,270,3.641,271,4.028,272,4.028,273,4.028,274,3.641,275,3.641,276,2.06,277,3.641,278,2.06,279,3.641,280,2.06,281,2.06,282,5.113,283,2.06,284,2.06,285,3.641,286,2.06,287,2.06,288,3.055,289,4.302,290,2.06,291,1.41,292,2.06,293,1.668,294,2.06,295,2.06,296,1.668,297,3.055,298,2.474,299,3.055,300,2.06,301,2.944,302,2.06]],["title/modules/UserModule.html",[28,1.285,35,1.285]],["body/modules/UserModule.html",[3,0.653,4,0.653,5,0.482,11,0.048,17,1.053,18,0.75,19,0.653,20,0.332,26,0.035,27,0.035,28,1.848,30,1.409,31,1.631,35,2.376,36,2.405,37,1.834,38,1.602,40,2.125,43,2.513,44,1.834,54,1.099,57,1.409,58,1.834,74,2.786,83,3.296,161,2.202,303,2.513,304,2.513,305,2.513,306,3.104,307,2.125,308,2.513,309,2.405,310,3.104,311,3.104,312,3.104,313,3.104]],["title/classes/UserResolver.html",[20,0.303,309,1.672]],["body/classes/UserResolver.html",[3,0.59,4,0.59,5,0.435,7,0.59,8,1.346,10,1.655,11,0.048,12,1.188,14,0.876,17,1.05,18,0.676,19,0.59,20,0.3,23,0.876,26,0.033,27,0.033,42,1.446,54,1.638,113,1.655,115,2.226,118,1.446,121,1.523,122,1.188,123,1.042,124,1.346,130,1.962,133,2.268,134,2.268,142,2.268,143,2.268,144,1.655,145,2.268,151,2.388,152,1.655,161,1.998,201,1.655,307,1.917,308,2.268,309,2.246,314,2.268,315,3.8,316,2.801,317,2.801,318,2.801,319,2.801,320,2.801,321,1.917,322,2.801,323,2.801,324,2.801,325,2.801,326,2.801,327,2.801,328,2.801,329,2.801,330,2.801]],["title/injectables/UserService.html",[155,0.885,161,1.134]],["body/injectables/UserService.html",[3,0.46,4,0.46,5,0.339,7,0.46,8,1.129,11,0.048,12,1.378,14,1.295,16,1.509,17,0.872,18,0.527,19,0.46,20,0.234,23,1.523,26,0.027,27,0.027,44,1.29,54,0.773,115,2.67,118,1.646,121,1.66,122,1.295,123,1,124,1.467,130,2.514,144,1.29,151,2.375,152,2.603,155,0.997,156,1.127,161,1.278,167,1.944,172,1.495,175,1.29,183,1.495,190,1.29,193,2.578,252,2.226,291,1.495,293,1.768,307,1.495,331,1.768,332,3.189,333,4.142,334,3.189,335,3.189,336,2.184,337,4.405,338,2.184,339,3.189,340,3.189,341,3.767,342,2.184,343,2.184,344,3.189,345,2.184,346,3.189,347,2.184,348,2.184,349,2.184,350,2.184,351,3.189,352,2.184,353,2.184,354,2.184,355,2.184]],["title/coverage.html",[356,3.099]],["body/coverage.html",[0,1.715,1,1.715,5,0.45,6,2.35,11,0.048,20,0.47,26,0.033,27,0.033,49,1.163,52,1.986,54,1.028,79,1.317,80,1.498,81,1.317,91,1.715,114,2.35,123,0.701,139,1.986,155,1.467,157,2.35,161,1.163,190,1.715,201,1.715,202,2.35,203,2.35,215,2.35,241,2.35,268,1.986,269,2.35,296,2.35,309,1.715,314,2.35,321,1.986,331,2.35,356,2.35,357,2.35,358,2.902,359,2.902,360,5.501,361,3.892,362,2.35,363,4.693,364,5.038,365,2.35,366,4.392,367,3.892,368,2.35,369,2.902,370,2.35,371,2.35,372,2.902,373,2.35,374,2.902]],["title/dependencies.html",[31,1.36,375,1.928]],["body/dependencies.html",[11,0.049,16,0.997,18,0.601,26,0.03,27,0.03,31,0.997,42,1.284,44,1.47,47,2.015,67,2.394,85,1.47,87,1.703,95,1.284,123,0.601,223,2.836,257,2.015,291,1.703,376,2.488,377,5.194,378,2.488,379,3.502,380,2.488,381,2.488,382,2.488,383,2.488,384,2.488,385,4.052,386,2.836,387,2.488,388,2.836,389,2.488,390,3.502,391,4.052,392,2.488,393,2.488,394,2.488,395,2.488,396,2.836,397,2.488,398,2.488,399,3.502,400,4.634,401,2.488,402,2.488,403,2.488,404,2.488,405,2.488,406,2.488,407,2.488,408,2.488,409,2.488,410,2.488,411,2.488,412,2.488,413,2.488,414,2.488,415,2.488,416,2.488,417,2.015,418,2.488,419,2.488,420,2.488,421,2.488,422,2.488,423,2.488,424,2.488,425,2.488,426,2.488,427,2.488,428,2.488,429,2.488,430,2.488,431,2.488,432,2.488,433,2.488,434,2.488]],["title/miscellaneous/functions.html",[435,1.407,436,2.749]],["body/miscellaneous/functions.html",[7,0.886,11,0.042,26,0.042,27,0.042,371,3.41,373,4.218,435,2.488,436,3.41,437,4.211]],["title/index.html",[7,0.501,438,1.63,439,1.63]],["body/index.html",[5,0.501,11,0.028,21,1.798,26,0.028,27,0.028,31,0.89,49,0.89,57,1.465,60,1.798,67,1.907,70,1.798,136,1.312,301,2.603,438,1.519,439,2.209,440,5.281,441,5.382,442,4.987,443,2.22,444,2.22,445,1.798,446,2.22,447,5.239,448,2.22,449,2.22,450,2.22,451,3.227,452,2.22,453,2.22,454,2.22,455,2.22,456,2.22,457,2.22,458,3.227,459,2.22,460,2.22,461,3.227,462,3.227,463,2.22,464,2.22,465,2.22,466,2.22,467,2.22,468,1.519,469,3.802,470,2.22,471,2.22,472,1.798,473,1.798,474,2.22,475,2.22,476,2.22,477,2.22,478,2.22,479,1.798,480,5.19,481,2.22,482,4.435,483,2.613,484,2.22,485,1.798,486,2.22,487,2.22,488,2.22,489,2.22,490,2.22,491,4.987,492,2.22,493,3.227,494,2.22,495,2.22,496,3.802,497,3.802,498,3.227,499,3.227,500,2.22,501,4.174,502,1.798,503,2.22,504,2.22,505,2.22,506,2.22,507,1.907,508,2.22,509,2.22,510,1.519]],["title/license.html",[438,1.63,439,1.63,507,1.407]],["body/license.html",[11,0.033,26,0.033,27,0.033,38,1.509,58,1.727,357,2.367,396,2.367,472,3.167,507,1.727,510,2.001,511,4.408,512,2.923,513,2.923,514,2.923,515,3.911,516,2.923,517,2.923,518,2.923,519,2.923,520,2.923,521,2.923,522,3.911,523,5.306,524,2.923,525,2.367,526,2.923,527,4.408,528,2.923,529,3.911,530,2.923,531,2.923,532,2.923,533,2.923,534,2.923,535,2.923,536,2.923,537,2.923,538,2.923,539,3.911,540,2.923,541,2.923,542,2.923,543,2.923,544,2.923,545,2.923,546,2.923,547,3.911,548,3.911,549,2.923,550,2.923,551,2.923,552,2.923,553,2.923,554,2.923,555,2.923,556,2.923,557,2.923,558,2.923,559,2.923,560,2.923,561,2.923,562,2.923,563,2.923,564,2.923,565,2.923,566,2.923,567,2.923,568,2.923,569,2.923,570,2.923,571,2.923,572,2.923,573,2.923,574,2.923,575,2.923,576,2.923]],["title/modules.html",[30,1.738]],["body/modules.html",[11,0.041,26,0.041,27,0.041,29,2.388,30,1.835,34,2.086,35,1.835,386,4.146,577,5.12,578,5.12,579,5.12]],["title/overview.html",[580,3.099]],["body/overview.html",[0,1.813,11,0.047,26,0.035,27,0.035,29,3.025,30,1.393,31,1.618,32,2.485,33,2.485,34,2.831,35,2.369,36,2.387,37,1.813,38,1.584,63,1.813,75,2.485,77,2.485,78,2.485,79,2.369,80,2.331,81,2.05,113,1.813,156,1.584,161,2.091,303,2.485,304,2.485,305,2.485,580,2.485,581,4.039,582,3.271,583,3.068]],["title/properties.html",[242,2.006,375,1.928]],["body/properties.html",[11,0.046,26,0.042,27,0.042,242,2.502,507,2.502,510,2.898,584,4.233,585,4.233]],["title/miscellaneous/variables.html",[435,1.407,468,2.323]],["body/miscellaneous/variables.html",[7,0.368,11,0.049,14,0.546,16,0.7,23,1.322,26,0.023,27,0.023,49,1.08,52,1.845,58,1.032,59,1.845,63,1.593,67,1.032,68,2.534,71,1.593,95,0.902,97,2.534,102,1.196,105,1.845,106,1.032,111,1.196,116,1.845,122,0.843,123,0.967,139,1.845,150,2.183,165,1.946,167,1.7,175,1.032,181,1.196,183,1.196,189,2.183,190,2.188,195,1.414,199,1.414,206,2.183,220,2.183,233,2.183,252,1.946,253,4.043,254,1.414,298,3.686,301,2.739,321,1.845,362,1.414,365,1.414,368,1.414,370,1.414,388,2.998,417,1.414,435,1.032,445,2.183,468,1.196,473,2.183,479,2.183,483,1.414,485,1.414,502,1.414,525,2.183,582,1.414,586,1.747,587,1.747,588,1.747,589,1.747,590,2.696,591,2.696,592,3.293,593,1.747,594,1.747,595,1.747,596,1.747,597,1.747,598,1.747,599,2.696,600,1.747,601,2.696,602,1.747,603,1.747,604,1.747,605,1.747,606,1.747,607,1.747,608,1.747,609,2.696,610,1.747,611,2.696,612,1.747,613,1.747,614,2.696,615,1.747,616,1.747,617,1.747,618,1.747,619,1.747,620,1.747,621,1.747,622,1.747,623,3.293,624,2.696,625,1.747,626,1.747,627,1.747,628,1.747,629,1.747,630,1.747,631,1.747,632,2.696,633,1.747,634,2.696,635,1.747,636,1.747,637,1.747,638,1.747,639,2.696,640,1.747,641,1.747,642,1.747,643,2.696,644,1.747,645,1.747,646,1.747,647,1.747,648,1.747,649,1.747,650,1.747,651,1.747,652,1.747,653,1.747,654,2.696,655,1.747,656,1.747,657,1.747]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/GraphQlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserModel.html":{},"modules/UserModule.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":360,"title":{},"body":{"coverage.html":{}}}],["0.1.0",{"_index":585,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":427,"title":{},"body":{"dependencies.html":{}}}],["0.11.4",{"_index":434,"title":{},"body":{"dependencies.html":{}}}],["0.3.11",{"_index":432,"title":{},"body":{"dependencies.html":{}}}],["0.3.2",{"_index":418,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":421,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":364,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":361,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":367,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":366,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":369,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":582,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":412,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":254,"title":{},"body":{"injectables/PasswordService.html":{},"miscellaneous/variables.html":{}}}],["10.0.2",{"_index":393,"title":{},"body":{"dependencies.html":{}}}],["10.1.7",{"_index":390,"title":{},"body":{"dependencies.html":{}}}],["15.0.0",{"_index":400,"title":{},"body":{"dependencies.html":{}}}],["15.1.0",{"_index":377,"title":{},"body":{"dependencies.html":{}}}],["15.2.1",{"_index":379,"title":{},"body":{"dependencies.html":{}}}],["15.5.3",{"_index":408,"title":{},"body":{"dependencies.html":{}}}],["16.6.0",{"_index":414,"title":{},"body":{"dependencies.html":{}}}],["1970",{"_index":628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.3.0",{"_index":431,"title":{},"body":{"dependencies.html":{}}}],["2023",{"_index":513,"title":{},"body":{"license.html":{}}}],["3",{"_index":581,"title":{},"body":{"overview.html":{}}}],["3.11.1",{"_index":410,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":583,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":422,"title":{},"body":{"dependencies.html":{}}}],["5.0.0",{"_index":420,"title":{},"body":{"dependencies.html":{}}}],["5.1.0",{"_index":413,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":288,"title":{},"body":{"entities/UserModel.html":{}}}],["7.5.0",{"_index":429,"title":{},"body":{"dependencies.html":{}}}],["8.3.15",{"_index":416,"title":{},"body":{"dependencies.html":{}}}],["8.8.0",{"_index":424,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":391,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":397,"title":{},"body":{"dependencies.html":{}}}],["9.0.3",{"_index":394,"title":{},"body":{"dependencies.html":{}}}],["above",{"_index":546,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access/interfaces",{"_index":138,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"entities/UserModel.html":{}}}],["accesstoken",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":571,"title":{},"body":{"license.html":{}}}],["always",{"_index":647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["and/or",{"_index":537,"title":{},"body":{"license.html":{}}}],["angular/animations",{"_index":376,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":378,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":380,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":381,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":382,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":383,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":384,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":385,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":389,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":441,"title":{},"body":{"index.html":{}}}],["apollo",{"_index":409,"title":{},"body":{"dependencies.html":{}}}],["apollodriver",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["apollodriverconfig",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["app",{"_index":442,"title":{},"body":{"index.html":{}}}],["app's",{"_index":491,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["app.resolver",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps/.../app.resolver.ts",{"_index":588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.decorator.ts",{"_index":589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.ts",{"_index":587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../main.ts",{"_index":437,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apps/.../user.decorator.ts",{"_index":586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/app.controller.ts:7",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["apps/backend/api/src/app/app.module.ts",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["apps/backend/api/src/app/app.resolver.ts",{"_index":362,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/auth/auth.module.ts",{"_index":82,"title":{},"body":{"modules/AuthModule.html":{}}}],["apps/backend/api/src/app/auth/decorators/auth.decorator.ts",{"_index":365,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts",{"_index":114,"title":{},"body":{"classes/AuthResolver.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:10",{"_index":120,"title":{},"body":{"classes/AuthResolver.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:16",{"_index":128,"title":{},"body":{"classes/AuthResolver.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:26",{"_index":132,"title":{},"body":{"classes/AuthResolver.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts:13",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts:22",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts:39",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts",{"_index":241,"title":{},"body":{"injectables/PasswordService.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts:10",{"_index":251,"title":{},"body":{"injectables/PasswordService.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts:15",{"_index":249,"title":{},"body":{"injectables/PasswordService.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts:7",{"_index":255,"title":{},"body":{"injectables/PasswordService.html":{}}}],["apps/backend/api/src/app/auth/strategy/jwt.strategy.ts",{"_index":215,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/strategy/jwt.strategy.ts:20",{"_index":219,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/backend/api/src/app/auth/strategy/jwt.strategy.ts:7",{"_index":217,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/backend/api/src/app/users/decorators/user.decorator.ts",{"_index":368,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/users/guards/graphql.auth",{"_index":202,"title":{},"body":{"classes/GraphQlAuthGuard.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/models/user.model.ts",{"_index":269,"title":{},"body":{"entities/UserModel.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/models/user.model.ts:18",{"_index":280,"title":{},"body":{"entities/UserModel.html":{}}}],["apps/backend/api/src/app/users/models/user.model.ts:22",{"_index":276,"title":{},"body":{"entities/UserModel.html":{}}}],["apps/backend/api/src/app/users/models/user.model.ts:26",{"_index":286,"title":{},"body":{"entities/UserModel.html":{}}}],["apps/backend/api/src/app/users/models/user.model.ts:30",{"_index":278,"title":{},"body":{"entities/UserModel.html":{}}}],["apps/backend/api/src/app/users/models/user.model.ts:34",{"_index":284,"title":{},"body":{"entities/UserModel.html":{}}}],["apps/backend/api/src/app/users/models/user.model.ts:38",{"_index":283,"title":{},"body":{"entities/UserModel.html":{}}}],["apps/backend/api/src/app/users/models/user.model.ts:42",{"_index":290,"title":{},"body":{"entities/UserModel.html":{}}}],["apps/backend/api/src/app/users/models/user.model.ts:46",{"_index":281,"title":{},"body":{"entities/UserModel.html":{}}}],["apps/backend/api/src/app/users/resolvers/user.resolver.ts",{"_index":314,"title":{},"body":{"classes/UserResolver.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/resolvers/user.resolver.ts:16",{"_index":320,"title":{},"body":{"classes/UserResolver.html":{}}}],["apps/backend/api/src/app/users/resolvers/user.resolver.ts:9",{"_index":317,"title":{},"body":{"classes/UserResolver.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts",{"_index":331,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:16",{"_index":343,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:21",{"_index":345,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:26",{"_index":347,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:31",{"_index":342,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:8",{"_index":338,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/users.module.ts",{"_index":306,"title":{},"body":{"modules/UserModule.html":{}}}],["apps/backend/api/src/environment/environment.ts",{"_index":370,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/main.ts",{"_index":371,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["args",{"_index":654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["args.password",{"_index":657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["args.username",{"_index":656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arising",{"_index":575,"title":{},"body":{"license.html":{}}}],["associated",{"_index":524,"title":{},"body":{"license.html":{}}}],["ast",{"_index":639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ast.kind",{"_index":645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["async",{"_index":115,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":98,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["auth/auth.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["authentication",{"_index":594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authguard",{"_index":209,"title":{},"body":{"classes/GraphQlAuthGuard.html":{}}}],["authguard('jwt",{"_index":211,"title":{},"body":{"classes/GraphQlAuthGuard.html":{}}}],["authmodule",{"_index":34,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authors",{"_index":564,"title":{},"body":{"license.html":{}}}],["authresolver",{"_index":91,"title":{"classes/AuthResolver.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"coverage.html":{}}}],["authservice",{"_index":79,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":476,"title":{},"body":{"index.html":{}}}],["await",{"_index":152,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["axios",{"_index":411,"title":{},"body":{"dependencies.html":{}}}],["backend",{"_index":440,"title":{},"body":{"index.html":{}}}],["backend/api",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["based",{"_index":464,"title":{},"body":{"index.html":{}}}],["basic",{"_index":262,"title":{},"body":{"injectables/PasswordService.html":{}}}],["bcrypt",{"_index":257,"title":{},"body":{"injectables/PasswordService.html":{},"dependencies.html":{}}}],["boolean",{"_index":265,"title":{},"body":{"injectables/PasswordService.html":{}}}],["bootstrap",{"_index":373,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":579,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":386,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["build",{"_index":485,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["builds",{"_index":486,"title":{},"body":{"index.html":{}}}],["built",{"_index":443,"title":{},"body":{"index.html":{}}}],["c",{"_index":512,"title":{},"body":{"license.html":{}}}],["calculate",{"_index":260,"title":{},"body":{"injectables/PasswordService.html":{}}}],["cd",{"_index":459,"title":{},"body":{"index.html":{}}}],["charge",{"_index":519,"title":{},"body":{"license.html":{}}}],["check",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["checking",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["checks",{"_index":624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["choose",{"_index":94,"title":{},"body":{"modules/AuthModule.html":{}}}],["claim",{"_index":567,"title":{},"body":{"license.html":{}}}],["class",{"_index":20,"title":{"classes/AuthResolver.html":{},"classes/GraphQlAuthGuard.html":{},"classes/UserResolver.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/GraphQlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserModel.html":{},"modules/UserModule.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["classes",{"_index":113,"title":{},"body":{"classes/AuthResolver.html":{},"classes/GraphQlAuthGuard.html":{},"classes/UserResolver.html":{},"overview.html":{}}}],["client",{"_index":473,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["clone",{"_index":451,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":75,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":77,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":76,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":78,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":303,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":304,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":305,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["coded",{"_index":652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["column",{"_index":282,"title":{},"body":{"entities/UserModel.html":{}}}],["column({length",{"_index":287,"title":{},"body":{"entities/UserModel.html":{}}}],["column({unique",{"_index":277,"title":{},"body":{"entities/UserModel.html":{}}}],["compare",{"_index":245,"title":{},"body":{"injectables/PasswordService.html":{}}}],["compare(password",{"_index":247,"title":{},"body":{"injectables/PasswordService.html":{}}}],["comparision",{"_index":267,"title":{},"body":{"injectables/PasswordService.html":{}}}],["comparison",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["compile",{"_index":506,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":493,"title":{},"body":{"index.html":{}}}],["compose",{"_index":497,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":545,"title":{},"body":{"license.html":{}}}],["connection",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["console",{"_index":610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["const",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{},"classes/GraphQlAuthGuard.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":118,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":119,"title":{},"body":{"classes/AuthResolver.html":{}}}],["constructor(jwtservice",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(private",{"_index":143,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["constructor(userrepository",{"_index":336,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":316,"title":{},"body":{"classes/UserResolver.html":{}}}],["context",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"classes/GraphQlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["context.getargs()[1",{"_index":655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contract",{"_index":572,"title":{},"body":{"license.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{},"overview.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["copies",{"_index":539,"title":{},"body":{"license.html":{}}}],["copy",{"_index":522,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":511,"title":{},"body":{"license.html":{}}}],["cost",{"_index":258,"title":{},"body":{"injectables/PasswordService.html":{}}}],["coverage",{"_index":356,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/UserModel.html":{},"modules/UserModule.html":{},"index.html":{}}}],["created",{"_index":270,"title":{},"body":{"entities/UserModel.html":{}}}],["createdatecolumn",{"_index":275,"title":{},"body":{"entities/UserModel.html":{}}}],["createparamdecorator",{"_index":590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createuser",{"_index":332,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(user",{"_index":340,"title":{},"body":{"injectables/UserService.html":{}}}],["ctx",{"_index":212,"title":{},"body":{"classes/GraphQlAuthGuard.html":{}}}],["ctx.getcontext().req",{"_index":214,"title":{},"body":{"classes/GraphQlAuthGuard.html":{}}}],["currentuser",{"_index":321,"title":{},"body":{"classes/UserResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["damages",{"_index":568,"title":{},"body":{"license.html":{}}}],["data",{"_index":591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"entities/UserModel.html":{},"miscellaneous/variables.html":{}}}],["databasec",{"_index":311,"title":{},"body":{"modules/UserModule.html":{}}}],["date",{"_index":298,"title":{},"body":{"entities/UserModel.html":{},"miscellaneous/variables.html":{}}}],["date(environment.jwt.expiresin).getdate",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["date(parseint(ast.value",{"_index":649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(value",{"_index":637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dates",{"_index":617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db",{"_index":301,"title":{},"body":{"entities/UserModel.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["db:migration:create",{"_index":500,"title":{},"body":{"index.html":{}}}],["db:migration:models",{"_index":612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db:migration:revert",{"_index":503,"title":{},"body":{"index.html":{}}}],["db:migration:run",{"_index":502,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["db:migrations:models",{"_index":505,"title":{},"body":{"index.html":{}}}],["db:start",{"_index":494,"title":{},"body":{"index.html":{}}}],["db:stop",{"_index":498,"title":{},"body":{"index.html":{}}}],["deal",{"_index":526,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":576,"title":{},"body":{"license.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"entities/UserModel.html":{},"classes/UserResolver.html":{}}}],["decorators/auth.decorator",{"_index":140,"title":{},"body":{"classes/AuthResolver.html":{}}}],["decorators/user.decorator",{"_index":322,"title":{},"body":{"classes/UserResolver.html":{}}}],["default",{"_index":97,"title":{},"body":{"modules/AuthModule.html":{},"injectables/PasswordService.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":100,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/GraphQlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserModel.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["description",{"_index":621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["directory",{"_index":458,"title":{},"body":{"index.html":{}}}],["dist/apps/backend/api/src/**/*.model.js",{"_index":613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dist/apps/backend/api/src/migrations/*.js",{"_index":615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["distribute",{"_index":535,"title":{},"body":{"license.html":{}}}],["dmitry",{"_index":514,"title":{},"body":{"license.html":{}}}],["docker",{"_index":496,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":357,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["down",{"_index":499,"title":{},"body":{"index.html":{}}}],["driver",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["dynamic",{"_index":387,"title":{},"body":{"dependencies.html":{}}}],["email",{"_index":271,"title":{},"body":{"entities/UserModel.html":{}}}],["end",{"_index":235,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["engine",{"_index":406,"title":{},"body":{"dependencies.html":{}}}],["entities",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"entities/UserModel.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entity",{"_index":268,"title":{"entities/UserModel.html":{}},"body":{"entities/UserModel.html":{},"coverage.html":{}}}],["env",{"_index":463,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":465,"title":{},"body":{"index.html":{}}}],["environment",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["environment.connection",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["environment.jwt.expiresin",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{}}}],["environment.jwt.secret",{"_index":108,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["environment/environment",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["error('graphql",{"_index":632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eslint",{"_index":490,"title":{},"body":{"index.html":{}}}],["event",{"_index":563,"title":{},"body":{"license.html":{}}}],["executioncontext",{"_index":206,"title":{},"body":{"classes/GraphQlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["expected",{"_index":634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expires",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["explore",{"_index":475,"title":{},"body":{"index.html":{}}}],["export",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/GraphQlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserModel.html":{},"modules/UserModule.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":83,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["express",{"_index":396,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["exprires",{"_index":234,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extends",{"_index":210,"title":{},"body":{"classes/GraphQlAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extract",{"_index":228,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":221,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":232,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["factor",{"_index":259,"title":{},"body":{"injectables/PasswordService.html":{}}}],["false",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/GraphQlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserModel.html":{},"modules/UserModule.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{}}}],["files",{"_index":525,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["fill",{"_index":466,"title":{},"body":{"index.html":{}}}],["find",{"_index":150,"title":{},"body":{"classes/AuthResolver.html":{},"miscellaneous/variables.html":{}}}],["findall",{"_index":333,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid",{"_index":334,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid(id",{"_index":344,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyusername",{"_index":335,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyusername(username",{"_index":346,"title":{},"body":{"injectables/UserService.html":{}}}],["fitness",{"_index":559,"title":{},"body":{"license.html":{}}}],["follow",{"_index":449,"title":{},"body":{"index.html":{}}}],["following",{"_index":544,"title":{},"body":{"license.html":{}}}],["format",{"_index":648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["free",{"_index":518,"title":{},"body":{"license.html":{}}}],["function",{"_index":372,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":436,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":542,"title":{},"body":{"license.html":{}}}],["getdata",{"_index":9,"title":{},"body":{"controllers/AppController.html":{}}}],["gethash",{"_index":246,"title":{},"body":{"injectables/PasswordService.html":{}}}],["gethash(password",{"_index":250,"title":{},"body":{"injectables/PasswordService.html":{}}}],["getrequest",{"_index":204,"title":{},"body":{"classes/GraphQlAuthGuard.html":{}}}],["getrequest(context",{"_index":205,"title":{},"body":{"classes/GraphQlAuthGuard.html":{}}}],["getting",{"_index":438,"title":{"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["git",{"_index":453,"title":{},"body":{"index.html":{}}}],["goal",{"_index":593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gqlexecutioncontext",{"_index":208,"title":{},"body":{"classes/GraphQlAuthGuard.html":{}}}],["gqlexecutioncontext.create(context",{"_index":213,"title":{},"body":{"classes/GraphQlAuthGuard.html":{}}}],["granted",{"_index":517,"title":{},"body":{"license.html":{}}}],["graphql",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["graphqlauthguard",{"_index":201,"title":{"classes/GraphQlAuthGuard.html":{}},"body":{"classes/GraphQlAuthGuard.html":{},"classes/UserResolver.html":{},"coverage.html":{}}}],["graphqljson",{"_index":653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["graphqlmodule",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forroot",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlscalartype",{"_index":620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guard",{"_index":325,"title":{},"body":{"classes/UserResolver.html":{}}}],["guard.ts",{"_index":203,"title":{},"body":{"classes/GraphQlAuthGuard.html":{},"coverage.html":{}}}],["guard.ts:7",{"_index":207,"title":{},"body":{"classes/GraphQlAuthGuard.html":{}}}],["guards/graphql.auth",{"_index":324,"title":{},"body":{"classes/UserResolver.html":{}}}],["hard",{"_index":651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hash",{"_index":256,"title":{},"body":{"injectables/PasswordService.html":{}}}],["hash(password",{"_index":263,"title":{},"body":{"injectables/PasswordService.html":{}}}],["header",{"_index":229,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["headers.payload.secret",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["hereby",{"_index":516,"title":{},"body":{"license.html":{}}}],["holders",{"_index":565,"title":{},"body":{"license.html":{}}}],["host",{"_index":599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:3000/graphql",{"_index":471,"title":{},"body":{"index.html":{}}}],["https://github.com/yakup",{"_index":454,"title":{},"body":{"index.html":{}}}],["id",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserModel.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":358,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":236,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":294,"title":{},"body":{"entities/UserModel.html":{}}}],["implied",{"_index":555,"title":{},"body":{"license.html":{}}}],["import",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/GraphQlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserModel.html":{},"modules/UserModule.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["included",{"_index":549,"title":{},"body":{"license.html":{}}}],["including",{"_index":529,"title":{},"body":{"license.html":{}}}],["incoming",{"_index":230,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["indent",{"_index":419,"title":{},"body":{"dependencies.html":{}}}],["independent",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/GraphQlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserModel.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/GraphQlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserModel.html":{},"modules/UserModule.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":155,"title":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":348,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(usermodel",{"_index":349,"title":{},"body":{"injectables/UserService.html":{}}}],["insomnia",{"_index":474,"title":{},"body":{"index.html":{}}}],["install",{"_index":461,"title":{},"body":{"index.html":{}}}],["instance",{"_index":625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["instanceof",{"_index":630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["integer",{"_index":643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invalid",{"_index":650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isvalid",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["january",{"_index":627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jr/task",{"_index":455,"title":{},"body":{"index.html":{}}}],["json",{"_index":417,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwt",{"_index":95,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":231,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":86,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":80,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":106,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"entities/UserModel.html":{},"miscellaneous/variables.html":{}}}],["kind",{"_index":554,"title":{},"body":{"license.html":{}}}],["kind.int",{"_index":646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["length",{"_index":302,"title":{},"body":{"entities/UserModel.html":{}}}],["liability",{"_index":569,"title":{},"body":{"license.html":{}}}],["liable",{"_index":566,"title":{},"body":{"license.html":{}}}],["license",{"_index":507,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":508,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":530,"title":{},"body":{"license.html":{}}}],["limited",{"_index":556,"title":{},"body":{"license.html":{}}}],["lint",{"_index":487,"title":{},"body":{"index.html":{}}}],["lints",{"_index":488,"title":{},"body":{"index.html":{}}}],["list.git",{"_index":456,"title":{},"body":{"index.html":{}}}],["list/apps/backend",{"_index":460,"title":{},"body":{"index.html":{}}}],["list/shared/data",{"_index":137,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"entities/UserModel.html":{}}}],["logging",{"_index":609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login",{"_index":116,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["login(signinpayload",{"_index":125,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["logout",{"_index":117,"title":{},"body":{"classes/AuthResolver.html":{}}}],["loguot",{"_index":154,"title":{},"body":{"classes/AuthResolver.html":{}}}],["mark",{"_index":297,"title":{},"body":{"entities/UserModel.html":{}}}],["marks",{"_index":292,"title":{},"body":{"entities/UserModel.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/GraphQlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserModel.html":{},"modules/UserModule.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":558,"title":{},"body":{"license.html":{}}}],["merge",{"_index":533,"title":{},"body":{"license.html":{}}}],["message",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["metadata",{"_index":426,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":227,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/GraphQlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["migration",{"_index":501,"title":{},"body":{"index.html":{}}}],["migrations",{"_index":614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["milliseconds",{"_index":626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":435,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":510,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["mode",{"_index":484,"title":{},"body":{"index.html":{}}}],["model",{"_index":312,"title":{},"body":{"modules/UserModule.html":{}}}],["models",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["models/user.model",{"_index":307,"title":{},"body":{"modules/UserModule.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["modify",{"_index":532,"title":{},"body":{"license.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["monorepo",{"_index":448,"title":{},"body":{"index.html":{}}}],["mutations",{"_index":619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":122,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/GraphQlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserModel.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["navigate",{"_index":457,"title":{},"body":{"index.html":{}}}],["necessary",{"_index":467,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":444,"title":{},"body":{"index.html":{}}}],["nestjs/apollo",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/GraphQlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"modules/UserModule.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":392,"title":{},"body":{"dependencies.html":{}}}],["nestjs/graphql",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"classes/GraphQlAuthGuard.html":{},"classes/UserResolver.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":87,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":85,"title":{},"body":{"modules/AuthModule.html":{},"classes/GraphQlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":395,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newuser",{"_index":353,"title":{},"body":{"injectables/UserService.html":{}}}],["ngrx/component",{"_index":398,"title":{},"body":{"dependencies.html":{}}}],["ngrx/effects",{"_index":401,"title":{},"body":{"dependencies.html":{}}}],["ngrx/entity",{"_index":402,"title":{},"body":{"dependencies.html":{}}}],["ngrx/router",{"_index":403,"title":{},"body":{"dependencies.html":{}}}],["ngrx/store",{"_index":404,"title":{},"body":{"dependencies.html":{}}}],["nguniversal/express",{"_index":405,"title":{},"body":{"dependencies.html":{}}}],["nickname",{"_index":272,"title":{},"body":{"entities/UserModel.html":{}}}],["noninfringement",{"_index":562,"title":{},"body":{"license.html":{}}}],["notice",{"_index":547,"title":{},"body":{"license.html":{}}}],["npm",{"_index":462,"title":{},"body":{"index.html":{}}}],["npx",{"_index":480,"title":{},"body":{"index.html":{}}}],["nrwl/angular",{"_index":407,"title":{},"body":{"dependencies.html":{}}}],["null",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":252,"title":{},"body":{"injectables/PasswordService.html":{},"entities/UserModel.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["number(process.env.db_port",{"_index":602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(process.env.jwt_expires_in",{"_index":596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nx",{"_index":447,"title":{},"body":{"index.html":{}}}],["object",{"_index":592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["obtaining",{"_index":521,"title":{},"body":{"license.html":{}}}],["optional",{"_index":124,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/GraphQlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserModel.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["options",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{}}}],["otherwise",{"_index":574,"title":{},"body":{"license.html":{}}}],["out",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":580,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":375,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":352,"title":{},"body":{"injectables/UserService.html":{}}}],["parameters",{"_index":121,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/GraphQlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["params",{"_index":147,"title":{},"body":{"classes/AuthResolver.html":{}}}],["parseliteral(ast",{"_index":644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parser",{"_index":638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parsevalue(value",{"_index":635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["partial",{"_index":341,"title":{},"body":{"injectables/UserService.html":{}}}],["particular",{"_index":560,"title":{},"body":{"license.html":{}}}],["passport",{"_index":223,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":84,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":99,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":224,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":225,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"entities/UserModel.html":{},"miscellaneous/variables.html":{}}}],["password.service",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordhash",{"_index":248,"title":{},"body":{"injectables/PasswordService.html":{}}}],["passwordservice",{"_index":81,"title":{"injectables/PasswordService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"coverage.html":{},"overview.html":{}}}],["path",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["payload",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":239,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":240,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["permission",{"_index":515,"title":{},"body":{"license.html":{}}}],["permit",{"_index":540,"title":{},"body":{"license.html":{}}}],["person",{"_index":520,"title":{},"body":{"license.html":{}}}],["persons",{"_index":541,"title":{},"body":{"license.html":{}}}],["pg",{"_index":423,"title":{},"body":{"dependencies.html":{}}}],["phone",{"_index":273,"title":{},"body":{"entities/UserModel.html":{}}}],["playground",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["port",{"_index":601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["portions",{"_index":551,"title":{},"body":{"license.html":{}}}],["postgres",{"_index":445,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["primary",{"_index":295,"title":{},"body":{"entities/UserModel.html":{}}}],["primarygeneratedcolumn",{"_index":279,"title":{},"body":{"entities/UserModel.html":{}}}],["private",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{}}}],["privatekey",{"_index":107,"title":{},"body":{"modules/AuthModule.html":{}}}],["process.env.db_host",{"_index":600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name",{"_index":605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_type",{"_index":597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_user_name",{"_index":603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_user_password",{"_index":604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.jwt_secret",{"_index":595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":483,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["project",{"_index":478,"title":{},"body":{"index.html":{}}}],["promise",{"_index":130,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":242,"title":{"properties.html":{}},"body":{"injectables/PasswordService.html":{},"entities/UserModel.html":{},"properties.html":{}}}],["property",{"_index":299,"title":{},"body":{"entities/UserModel.html":{}}}],["provided",{"_index":552,"title":{},"body":{"license.html":{}}}],["providers",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":244,"title":{},"body":{"injectables/PasswordService.html":{}}}],["publish",{"_index":534,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":561,"title":{},"body":{"license.html":{}}}],["queries",{"_index":618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["query",{"_index":134,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["query('login",{"_index":127,"title":{},"body":{"classes/AuthResolver.html":{}}}],["query('logout",{"_index":131,"title":{},"body":{"classes/AuthResolver.html":{}}}],["query('user",{"_index":327,"title":{},"body":{"classes/UserResolver.html":{}}}],["query('user')@useguards(graphqlauthguard",{"_index":319,"title":{},"body":{"classes/UserResolver.html":{}}}],["readonly",{"_index":144,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["reflect",{"_index":425,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":101,"title":{},"body":{"modules/AuthModule.html":{}}}],["repo",{"_index":452,"title":{},"body":{"index.html":{}}}],["repository",{"_index":337,"title":{},"body":{"injectables/UserService.html":{}}}],["req",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["request",{"_index":148,"title":{},"body":{"classes/AuthResolver.html":{},"classes/GraphQlAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["required",{"_index":146,"title":{},"body":{"classes/AuthResolver.html":{}}}],["reset",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolve",{"_index":145,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["resolver",{"_index":133,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["resolver('auth",{"_index":141,"title":{},"body":{"classes/AuthResolver.html":{}}}],["resolver('user",{"_index":326,"title":{},"body":{"classes/UserResolver.html":{}}}],["resolvermap",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["resolvers",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["resolvers/auth.resolver",{"_index":92,"title":{},"body":{"modules/AuthModule.html":{}}}],["resolvers/user.resolver",{"_index":310,"title":{},"body":{"modules/UserModule.html":{}}}],["restriction",{"_index":528,"title":{},"body":{"license.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/GraphQlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserModel.html":{},"modules/UserModule.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/GraphQlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/GraphQlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["revert",{"_index":504,"title":{},"body":{"index.html":{}}}],["rights",{"_index":531,"title":{},"body":{"license.html":{}}}],["run",{"_index":479,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["running",{"_index":470,"title":{},"body":{"index.html":{}}}],["runs",{"_index":482,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":428,"title":{},"body":{"dependencies.html":{}}}],["saldrounds",{"_index":243,"title":{},"body":{"injectables/PasswordService.html":{}}}],["scalar",{"_index":623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["script",{"_index":611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scripts",{"_index":477,"title":{},"body":{"index.html":{}}}],["secret",{"_index":105,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":237,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["sell",{"_index":538,"title":{},"body":{"license.html":{}}}],["send",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["serialize",{"_index":616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serialize(value",{"_index":629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serializer",{"_index":633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serve",{"_index":481,"title":{},"body":{"index.html":{}}}],["server",{"_index":388,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["service",{"_index":142,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["services",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["services/auth.service",{"_index":88,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{}}}],["services/password.service",{"_index":89,"title":{},"body":{"modules/AuthModule.html":{}}}],["services/user.service",{"_index":308,"title":{},"body":{"modules/UserModule.html":{},"classes/UserResolver.html":{}}}],["setup",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["shall",{"_index":548,"title":{},"body":{"license.html":{}}}],["signauthpayload",{"_index":126,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["signauthresponse",{"_index":135,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["signin",{"_index":139,"title":{},"body":{"classes/AuthResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signinpayload",{"_index":129,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["signinpayload.password",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinpayload.username",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{}}}],["single",{"_index":261,"title":{},"body":{"injectables/PasswordService.html":{}}}],["software",{"_index":523,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/GraphQlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserModel.html":{},"modules/UserModule.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["start",{"_index":469,"title":{},"body":{"index.html":{}}}],["started",{"_index":439,"title":{"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["starting",{"_index":607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["statements",{"_index":359,"title":{},"body":{"coverage.html":{}}}],["steps",{"_index":450,"title":{},"body":{"index.html":{}}}],["store",{"_index":399,"title":{},"body":{"dependencies.html":{}}}],["strategy",{"_index":222,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["strategy/jwt.strategy",{"_index":90,"title":{},"body":{"modules/AuthModule.html":{}}}],["string",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"entities/UserModel.html":{},"injectables/UserService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":543,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":536,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":550,"title":{},"body":{"license.html":{}}}],["super",{"_index":226,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":577,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":578,"title":{},"body":{"modules.html":{}}}],["synchronization",{"_index":606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["synchronize",{"_index":608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["syntax",{"_index":641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":296,"title":{},"body":{"entities/UserModel.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":374,"title":{},"body":{"coverage.html":{}}}],["task",{"_index":136,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"entities/UserModel.html":{},"index.html":{}}}],["test",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["tests",{"_index":492,"title":{},"body":{"index.html":{}}}],["this.authservice.login(signinpayload",{"_index":153,"title":{},"body":{"classes/AuthResolver.html":{}}}],["this.jwtservice.sign(payload",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordservice.compare(password",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.saldrounds",{"_index":264,"title":{},"body":{"injectables/PasswordService.html":{}}}],["this.userrepository.create(user",{"_index":354,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find",{"_index":350,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findoneby",{"_index":351,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":355,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.findbyid(user.id",{"_index":330,"title":{},"body":{"classes/UserResolver.html":{}}}],["this.userservice.findbyusername(username",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validateuser",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["time",{"_index":233,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["token",{"_index":96,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["tools",{"_index":415,"title":{},"body":{"dependencies.html":{}}}],["tort",{"_index":573,"title":{},"body":{"license.html":{}}}],["tree",{"_index":642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"entities/UserModel.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":149,"title":{},"body":{"classes/AuthResolver.html":{}}}],["tslib",{"_index":430,"title":{},"body":{"dependencies.html":{}}}],["turn",{"_index":93,"title":{},"body":{"modules/AuthModule.html":{}}}],["type",{"_index":123,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/GraphQlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"entities/UserModel.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typeorm",{"_index":291,"title":{},"body":{"entities/UserModel.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([usermodel",{"_index":313,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forroot",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["typepaths",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["typescript",{"_index":446,"title":{},"body":{"index.html":{}}}],["unauthorized",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["under",{"_index":509,"title":{},"body":{"index.html":{}}}],["unique",{"_index":289,"title":{},"body":{"entities/UserModel.html":{}}}],["unknown",{"_index":220,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["up",{"_index":495,"title":{},"body":{"index.html":{}}}],["update",{"_index":300,"title":{},"body":{"entities/UserModel.html":{}}}],["updated",{"_index":274,"title":{},"body":{"entities/UserModel.html":{}}}],["updatedatecolumn",{"_index":285,"title":{},"body":{"entities/UserModel.html":{}}}],["url",{"_index":598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["use",{"_index":472,"title":{},"body":{"index.html":{},"license.html":{}}}],["useguards",{"_index":323,"title":{},"body":{"classes/UserResolver.html":{}}}],["useguards(graphqlauthguard",{"_index":328,"title":{},"body":{"classes/UserResolver.html":{}}}],["user",{"_index":151,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"entities/UserModel.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["user.id",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.username",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":238,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["usermodel",{"_index":54,"title":{"entities/UserModel.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"entities/UserModel.html":{},"modules/UserModule.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["usermodule",{"_index":35,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"entities/UserModel.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":339,"title":{},"body":{"injectables/UserService.html":{}}}],["userresolver",{"_index":309,"title":{"classes/UserResolver.html":{}},"body":{"modules/UserModule.html":{},"classes/UserResolver.html":{},"coverage.html":{}}}],["users",{"_index":293,"title":{},"body":{"entities/UserModel.html":{},"injectables/UserService.html":{}}}],["users/models/user.model",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["users/services/user.service",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["users/users.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["userservice",{"_index":161,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"modules/UserModule.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":489,"title":{},"body":{"index.html":{}}}],["valid",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["validate",{"_index":216,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":218,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["validity",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["value",{"_index":253,"title":{},"body":{"injectables/PasswordService.html":{},"miscellaneous/variables.html":{}}}],["value.toisostring",{"_index":631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":363,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":468,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":584,"title":{},"body":{"properties.html":{}}}],["warranties",{"_index":557,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":553,"title":{},"body":{"license.html":{}}}],["welcome",{"_index":24,"title":{},"body":{"controllers/AppController.html":{}}}],["whether",{"_index":570,"title":{},"body":{"license.html":{}}}],["whoami",{"_index":315,"title":{},"body":{"classes/UserResolver.html":{}}}],["whoami(@currentuser",{"_index":329,"title":{},"body":{"classes/UserResolver.html":{}}}],["whoami(user",{"_index":318,"title":{},"body":{"classes/UserResolver.html":{}}}],["witch",{"_index":266,"title":{},"body":{"injectables/PasswordService.html":{}}}],["without",{"_index":527,"title":{},"body":{"license.html":{}}}],["zone.js",{"_index":433,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/app.controller.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { message: string; }\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common'\n\n@Controller()\nexport class AppController {\n\t// test get path\n\t@Get()\n\tgetData() {\n\t\treturn { message: 'Welcome to backend/api!' }\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend/api/src/app/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { GraphQLModule } from '@nestjs/graphql'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { Module } from '@nestjs/common'\nimport { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo'\n\nimport { AppController } from './app.controller'\nimport { environment } from '../environment/environment'\nimport { AuthModule } from './auth/auth.module'\nimport { resolverMap } from './app.resolver'\nimport { UserModel } from './users/models/user.model'\nimport { UserModule } from './users/users.module'\n\n@Module({\n\timports: [\n\t\t// create a connection to the database for this models\n\t\tTypeOrmModule.forRoot({\n\t\t\t...environment.connection,\n\t\t\tentities: [UserModel],\n\t\t}),\n\t\t// setup GraphQLModule\n\t\tGraphQLModule.forRoot({\n\t\t\ttypePaths: ['./**/*.graphql'],\n\t\t\tcontext: ({ req }) => ({ req }),\n\t\t\tplayground: true,\n\t\t\tdriver: ApolloDriver,\n\t\t\tresolvers: [resolverMap],\n\t\t}),\n\t\tUserModule,\n\t\tAuthModule,\n\t],\n\tcontrollers: [AppController],\n\tproviders: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            PasswordService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { PassportModule } from '@nestjs/passport'\nimport { JwtModule } from '@nestjs/jwt'\nimport { environment } from '../../environment/environment'\nimport { AuthService } from './services/auth.service'\nimport { PasswordService } from './services/password.service'\nimport { JwtStrategy } from './strategy/jwt.strategy'\nimport { AuthResolver } from './resolvers/auth.resolver'\nimport { UserModule } from '../users/users.module'\n\n@Module({\n\timports: [\n\t\tUserModule,\n\t\t// turn on and choose jwt token as default to auth\n\t\tPassportModule.register({\n\t\t\tdefaultStrategy: 'jwt',\n\t\t}),\n\t\t// register JwtModule for create and check auth token\n\t\tJwtModule.register({\n\t\t\t// independent secret key for jwt token\n\t\t\tprivateKey: environment.jwt.secret,\n\t\t\t// options for auth\n\t\t\tsignOptions: {\n\t\t\t\texpiresIn: environment.jwt.expiresIn,\n\t\t\t},\n\t\t}),\n\t],\n\tproviders: [AuthService, PasswordService, JwtStrategy, AuthResolver],\n\texports: [AuthService, PassportModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthResolver.html":{"url":"classes/AuthResolver.html","title":"class - AuthResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/resolvers/auth.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(signInPayload: SignAuthPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('login')\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInPayload\n                                    \n                                            SignAuthPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('logout')\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Resolver, Query } from '@nestjs/graphql'\nimport type {\n\tSignAuthPayload,\n\tSignAuthResponse,\n} from '@task-list/shared/data-access/interfaces'\nimport { SignIn } from '../decorators/auth.decorator'\nimport { AuthService } from '../services/auth.service'\n\n@Resolver('Auth')\nexport class AuthResolver {\n\t// get service\n\tconstructor(private readonly authService: AuthService) {}\n\n\t// resolve login\n\t@Query('login')\n\tasync login(\n\t\t// get required params from request\n\t\t@SignIn() signInPayload: SignAuthPayload\n\t): Promise {\n\t\t// try to find and return user\n\t\treturn await this.authService.login(signInPayload)\n\t}\n\n\t// resolve loguot\n\t@Query('logout')\n\tasync logout(): Promise {\n\t\treturn true\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/services/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, userService: UserService, passwordService: PasswordService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/auth/services/auth.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordService\n                                                  \n                                                        \n                                                                        PasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(signInPayload: SignAuthPayload)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/auth.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInPayload\n                                    \n                                            SignAuthPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/auth.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common'\nimport { JwtService } from '@nestjs/jwt'\nimport { UserService } from '../../users/services/user.service'\nimport { PasswordService } from './password.service'\nimport { UserModel } from '../../users/models/user.model'\nimport { environment } from '../../../environment/environment'\nimport {\n\tSignAuthPayload,\n\tSignAuthResponse,\n} from '@task-list/shared/data-access/interfaces'\n\n@Injectable({})\nexport class AuthService {\n\t// get services for auth\n\tconstructor(\n\t\tprivate readonly jwtService: JwtService,\n\t\tprivate readonly userService: UserService,\n\t\tprivate readonly passwordService: PasswordService\n\t) {}\n\n\t// checking validity of username and password\n\tasync validateUser(\n\t\tusername: string,\n\t\tpassword: string\n\t): Promise> {\n\t\tconst user = await this.userService.findByUsername(username)\n\t\t// password comparison\n\t\tconst isValid = user\n\t\t\t? await this.passwordService.compare(password, user.password)\n\t\t\t: false\n\t\tif (isValid) {\n\t\t\tdelete user.password\n\n\t\t\treturn user\n\t\t}\n\t\treturn null\n\t}\n\n\tasync login(signInPayload: SignAuthPayload): Promise {\n\t\t// get valid user\n\t\tconst user = await this.validateUser(\n\t\t\tsignInPayload.username,\n\t\t\tsignInPayload.password\n\t\t)\n\t\t// unauthorized user\n\t\tif (!user) throw new UnauthorizedException()\n\t\tconst payload = { username: user.username, id: user.id }\n\n\t\treturn {\n\t\t\t// send payload for create jwt token: headers.payload.secret\n\t\t\taccessToken: this.jwtService.sign(payload),\n\t\t\t// when expires\n\t\t\texpiresIn: new Date(environment.jwt.expiresIn).getDate(),\n\t\t\t// user id\n\t\t\tid: user.id,\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GraphQlAuthGuard.html":{"url":"classes/GraphQlAuthGuard.html","title":"class - GraphQlAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GraphQlAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/guards/graphql.auth-guard.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRequest\n                        \n                    \n                \n            \n            \n                \ngetRequest(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/guards/graphql.auth-guard.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExecutionContext } from '@nestjs/common'\nimport { GqlExecutionContext } from '@nestjs/graphql'\nimport { AuthGuard } from '@nestjs/passport'\n\nexport class GraphQlAuthGuard extends AuthGuard('jwt') {\n\t// get request from context\n\tgetRequest(context: ExecutionContext) {\n\t\tconst ctx = GqlExecutionContext.create(context)\n\n\t\treturn ctx.getContext().req\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/strategy/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/auth/strategy/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/strategy/jwt.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt'\nimport { PassportStrategy } from '@nestjs/passport'\nimport { Injectable } from '@nestjs/common'\nimport { environment } from '../../../environment/environment'\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n\tconstructor() {\n\t\tsuper({\n\t\t\t// method to extract the jwt from the auth header of the incoming request.\n\t\t\tjwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n\t\t\t// check when time exprires end\n\t\t\tignoreExpiration: false,\n\t\t\t// secret independent key for jwt token\n\t\t\tsecretOrKey: environment.jwt.secret,\n\t\t})\n\t}\n\n\t// return userId and username\n\tasync validate(payload: any) {\n\t\treturn { userId: payload.sub, username: payload.username }\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PasswordService.html":{"url":"injectables/PasswordService.html","title":"injectable - PasswordService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PasswordService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/services/password.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                saldRounds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                compare\n                            \n                            \n                                    Public\n                                getHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        compare\n                        \n                    \n                \n            \n            \n                \n                    \n                    compare(password: string, passwordHash: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/password.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    passwordHash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHash(password: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/password.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        saldRounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/auth/services/password.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { hash, compare } from 'bcrypt'\n\n@Injectable()\nexport class PasswordService {\n\t// cost factor for calculate a single BCrypt hash\n\tprivate saldRounds = 10\n\n\t// return hash basic on a password\n\tpublic getHash(password: string): Promise {\n\t\treturn hash(password, this.saldRounds)\n\t}\n\n\t// return boolean witch comparision hash password and password\n\tpublic compare(password: string, passwordHash: string): Promise {\n\t\treturn compare(password, passwordHash)\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserModel.html":{"url":"entities/UserModel.html","title":"entity - UserModel","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/models/user.model.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                nickname\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                phone\n                            \n                            \n                                updated\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/models/user.model.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/models/user.model.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/models/user.model.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        nickname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/models/user.model.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/models/user.model.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/models/user.model.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/models/user.model.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 50, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/models/user.model.ts:42\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import type { User } from '@task-list/shared/data-access/interfaces'\n\nimport {\n\tColumn,\n\tCreateDateColumn,\n\tEntity,\n\tPrimaryGeneratedColumn,\n\tUpdateDateColumn,\n} from 'typeorm'\n\n// marks a class as a database entity\n@Entity({\n\tname: 'users',\n})\nexport class UserModel implements User {\n\t// primary key of the database table\n  @PrimaryGeneratedColumn()\n\tid: number\n\n\t// mark date when property create\n\t@CreateDateColumn()\n\tcreated: string\n\n\t// mark date when property update\n\t@UpdateDateColumn()\n\tupdated: string\n\n\t// db column email\n\t@Column({ unique: true })\n\temail: string\n\n\t// db column phone optional\n\t@Column({ unique: true })\n\tphone?: string\n\n\t// db column password\n\t@Column()\n\tpassword: string\n\n\t// db column username\n  @Column({ length: 50, unique: true })\n\tusername: string\n\n\t// db column nickname optional\n\t@Column({ unique: true })\n\tnickname?: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend/api/src/app/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { UserModel } from './models/user.model'\nimport { UserService } from './services/user.service'\nimport { UserResolver } from './resolvers/user.resolver'\n\n@Module({\n\t// create a connection to the databasec for this model\n\timports: [TypeOrmModule.forFeature([UserModel])],\n\tproviders: [UserService, UserResolver],\n\texports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResolver.html":{"url":"classes/UserResolver.html","title":"class - UserResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/resolvers/user.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                whoAmI\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/users/resolvers/user.resolver.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        whoAmI\n                        \n                    \n                \n            \n            \n                \n                    \n                    whoAmI(user: UserModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('user')@UseGuards(GraphQlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/users/resolvers/user.resolver.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query, Resolver } from '@nestjs/graphql'\nimport { UserService } from '../services/user.service'\nimport type { UserModel } from '../models/user.model'\nimport { CurrentUser } from '../decorators/user.decorator'\nimport { UseGuards } from '@nestjs/common'\nimport { GraphQlAuthGuard } from '../guards/graphql.auth-guard'\n\n@Resolver('User')\nexport class UserResolver {\n\t// get user service\n\tconstructor(private readonly userService: UserService) {}\n\n\t// resolve user\n\t@Query('user')\n\t@UseGuards(GraphQlAuthGuard)\n\tasync whoAmI(@CurrentUser() user: UserModel): Promise {\n\t\treturn await this.userService.findById(user.id)\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/services/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findByUsername\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/users/services/user.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\n\nimport { UserModel } from '../models/user.model'\n\n@Injectable()\nexport class UserService {\n\t// get the repository of user\n\tconstructor(\n\t\t@InjectRepository(UserModel)\n\t\tprivate readonly userRepository: Repository\n\t) {}\n\n\t// return all users\n\tasync findAll(): Promise {\n\t\treturn await this.userRepository.find()\n\t}\n\n\t// return user by id\n\tasync findById(id: number): Promise {\n\t\treturn (await this.userRepository.findOneBy({ id })) || null\n\t}\n\n\t// return user by username\n\tasync findByUsername(username: string): Promise {\n\t\treturn await this.userRepository.findOneBy({ username })\n\t}\n\n\t// return new user by param user\n\tasync createUser(user: Partial): Promise {\n\t\tconst newUser = await this.userRepository.create(user)\n\n\t\treturn await this.userRepository.save(newUser)\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/backend/api/src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/app.resolver.ts\n            \n            variable\n            resolverMap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/decorators/auth.decorator.ts\n            \n            variable\n            SignIn\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/resolvers/auth.resolver.ts\n            \n            class\n            AuthResolver\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/services/password.service.ts\n            \n            injectable\n            PasswordService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/strategy/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/decorators/user.decorator.ts\n            \n            variable\n            CurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/guards/graphql.auth-guard.ts\n            \n            class\n            GraphQlAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/models/user.model.ts\n            \n            entity\n            UserModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/resolvers/user.resolver.ts\n            \n            class\n            UserResolver\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/services/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/backend/api/src/environment/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~15.1.0\n        \n            @angular/cdk : ~15.2.1\n        \n            @angular/common : ~15.1.0\n        \n            @angular/compiler : ~15.1.0\n        \n            @angular/core : ~15.1.0\n        \n            @angular/forms : ~15.1.0\n        \n            @angular/material : ~15.2.1\n        \n            @angular/platform-browser : ~15.1.0\n        \n            @angular/platform-browser-dynamic : ~15.1.0\n        \n            @angular/platform-server : ~15.1.0\n        \n            @angular/router : ~15.1.0\n        \n            @nestjs/apollo : ^10.1.7\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/graphql : ^10.1.7\n        \n            @nestjs/jwt : ^10.0.2\n        \n            @nestjs/passport : ^9.0.3\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @ngrx/component-store : ~15.0.0\n        \n            @ngrx/effects : ~15.0.0\n        \n            @ngrx/entity : ~15.0.0\n        \n            @ngrx/router-store : ~15.0.0\n        \n            @ngrx/store : ~15.0.0\n        \n            @nguniversal/express-engine : ~15.1.0\n        \n            @nrwl/angular : 15.5.3\n        \n            apollo-server-express : ^3.11.1\n        \n            axios : ^1.0.0\n        \n            bcrypt : ^5.1.0\n        \n            graphql : ^16.6.0\n        \n            graphql-tools : ^8.3.15\n        \n            graphql-type-json : ^0.3.2\n        \n            indent-string : ^5.0.0\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.8.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ~7.5.0\n        \n            tslib : ^2.3.0\n        \n            typeorm : ^0.3.11\n        \n            zone.js : ~0.11.4\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/backend/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nBackend API\nThis is a backend API app built with NestJS, GraphQL, Postgres, TypeScript and Nx Monorepo'\n\nGetting Started\nTo get started with this app, follow these steps:\n\nClone the repo: git clone https://github.com/yakup-jr/task-list.git\nNavigate to the app directory: cd task-list/apps/backend-api\nInstall dependencies: npm install\nCreate a .env file based on the .env.example file, and fill in the necessary environment variables.\nStart the app: npm start\n\nThe app will start running on http://localhost:3000/graphql. You can use an API client like Insomnia or GraphQL Playground to explore the API.\nAvailable Scripts\nIn the project directory, you can run:\nnpx nx serve backend-api\nRuns the app in production mode.\nnpx nx build backend-api\nBuilds the app for production.\nnpx nx lint backend-api\nLints the app using ESLint.\nnpx nx test backend-api\nRuns the app's tests.\nnpx nx compodoc backend-api\nRuns the app's compodoc\nnpx nx db:start backend-api\nUp the app's docker-compose\nnpx nx db:stop backend-api\nDown the app's docker-compose\nnpx nx db:stop backend-api\nRuns the app's docker-compose down\nnpx nx db:migration:create backend-api\nCreate the app's migration for db\nnpx nx db:migration:run backend-api\nRuns the app's migration for db\nnpx nx db:migration:revert backend-api\nRevert the app's migration for db\nnpx nx db:migrations:models backend-api\nCompile the app's models for migration\nLicense\nThis app is licensed under the MIT License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2023 Dmitry\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    1 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.1.0\n        \n            License : MIT\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CurrentUser   (apps/.../user.decorator.ts)\n                        \n                        \n                            environment   (apps/.../environment.ts)\n                        \n                        \n                            resolverMap   (apps/.../app.resolver.ts)\n                        \n                        \n                            SignIn   (apps/.../auth.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/backend/api/src/app/users/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n\t(data: unknown, context: ExecutionContext) => {\n\t\treturn context\n\t}\n)\n                    \n                \n\n\n        \n    \n\n    apps/backend/api/src/environment/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n\t// goal build\n\tproduction: false,\n\tjwt: {\n\t\t// secret key for authentication\n\t\tsecret: process.env.JWT_SECRET,\n    // when expires\n\t\texpiresIn: Number(process.env.JWT_EXPIRES_IN),\n\t},\n\tconnection: {\n\t\t// type server db\n\t\ttype: process.env.DB_TYPE as 'postgres',\n\t\t// url db server host\n\t\thost: process.env.DB_HOST,\n\t\t// postgres server port\n\t\tport: Number(process.env.DB_PORT),\n\t\t// username for login in db\n\t\tusername: process.env.DB_USER_NAME,\n\t\t// password for login in db\n\t\tpassword: process.env.DB_USER_PASSWORD,\n\t\t// name of db\n\t\tdatabase: process.env.DB_NAME,\n\t\t// synchronization every time when the database server is starting\n\t\tsynchronize: true,\n\t\t// logging in console\n\t\tlogging: true,\n\t\t// where to find files entities when the script db:migration:models is run\n\t\tentities: ['dist/apps/backend/api/src/**/*.model.js'],\n\t\t// where to find files migrations when the script db:migration:run is run\n\t\tmigrations: ['dist/apps/backend/api/src/migrations/*.js'],\n\t},\n}\n                    \n                \n\n\n        \n    \n\n    apps/backend/api/src/app/app.resolver.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        resolverMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n\t// serialize dates in graphql queries and mutations\n\tDate: new GraphQLScalarType({\n\t\tname: 'Date',\n\t\tdescription: 'Date custom scalar type',\n\t\t// checks if the value is an instance of Date and returns the time in milliseconds since January 1, 1970\n\t\tserialize(value) {\n\t\t\tif (value instanceof Date) {\n\t\t\t\treturn value.toISOString() // value from the client\n\t\t\t}\n\t\t\tthrow Error('GraphQL Date Scalar serializer expected a `Date` object')\n\t\t},\n\t\t// check value is number\n\t\tparseValue(value) {\n\t\t\tif (typeof value === 'number') {\n\t\t\t\treturn new Date(value) // value send to the client\n\t\t\t}\n\t\t\tthrow new Error('GraphQL Date Scalar parser expected a `number`')\n\t\t},\n\t\t// checks AST (Abstract Syntax Tree) value is an integer\n\t\tparseLiteral(ast) {\n\t\t\tif (ast.kind === Kind.INT) {\n\t\t\t\t// ast value is always in string format\n\t\t\t\treturn new Date(parseInt(ast.value, 10))\n\t\t\t}\n\t\t\t// Invalid hard-coded value (not an integer)\n\t\t\treturn null\n\t\t},\n\t}),\n\tJSON: GraphQLJSON,\n}\n                    \n                \n\n\n        \n    \n\n    apps/backend/api/src/app/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SignIn\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n\t(data: unknown, context: ExecutionContext) => {\n\t\t// get all args from context\n\t\tconst args = context.getArgs()[1]\n\n\t\treturn { username: args.username, password: args.password }\n\t}\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
